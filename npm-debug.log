0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.0.0-alpha-5
3 info using node@v0.10.29
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add spec="." args=[".",null]
8 verbose cache add local package /Users/atimberlake/Webroot/Leaflet.FreeDraw
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/atimberlake/.npm/3a52ce78-.lock
11 verbose tar pack [ '/Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball /Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package.tgz
13 verbose folder .
14 info prepublish leaflet.freedraw@0.4.4
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /Users/atimberlake/.npm/1f1177db-tar.lock
17 silly lockFile 419bc2b6-aflet-freedraw-0-4-4-package-tgz tar:///Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package.tgz
18 verbose lock tar:///Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package.tgz /Users/atimberlake/.npm/419bc2b6-aflet-freedraw-0-4-4-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 419bc2b6-aflet-freedraw-0-4-4-package-tgz tar:///Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package.tgz
22 silly lockFile 419bc2b6-aflet-freedraw-0-4-4-package-tgz tar:///Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package.tgz
23 silly lockFile cc7be0f0-m-leaflet-freedraw-0-4-4-package /Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package
24 verbose lock /Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package /Users/atimberlake/.npm/cc7be0f0-m-leaflet-freedraw-0-4-4-package.lock
25 silly lockFile cc7be0f0-m-leaflet-freedraw-0-4-4-package /Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package
26 silly lockFile cc7be0f0-m-leaflet-freedraw-0-4-4-package /Users/atimberlake/.npm/leaflet.freedraw/0.4.4/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'leaflet.freedraw',
29 silly publish   version: '0.4.4',
29 silly publish   description: 'Zoopla inspired freehand polygon creation using Leaflet.js.',
29 silly publish   main: 'dist/leaflet.freedraw.min.js',
29 silly publish   scripts: { test: 'grunt test' },
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'https://github.com/Wildhoney/Leaflet.FreeDraw.git' },
29 silly publish   keywords: [ 'leaflet', 'freedraw', 'polygon', 'drawing', 'freehand' ],
29 silly publish   author: { name: 'Adam Timberlake', email: 'adam.timberlake@gmail.com' },
29 silly publish   license: 'MIT',
29 silly publish   bugs: { url: 'https://github.com/Wildhoney/Leaflet.FreeDraw/issues' },
29 silly publish   homepage: 'https://github.com/Wildhoney/Leaflet.FreeDraw',
29 silly publish   dependencies:
29 silly publish    { bower: '^1.3.9',
29 silly publish      express: '^4.8.5',
29 silly publish      grunt: '^0.4.5',
29 silly publish      'grunt-cli': '^0.1.13',
29 silly publish      'grunt-contrib-compress': '^0.10.0',
29 silly publish      'grunt-contrib-concat': '^0.5.0',
29 silly publish      'grunt-contrib-copy': '^0.5.0',
29 silly publish      'grunt-contrib-jshint': '^0.10.0',
29 silly publish      'grunt-contrib-uglify': '^0.5.1',
29 silly publish      'grunt-karma': '^0.8.3',
29 silly publish      karma: '^0.12.22' },
29 silly publish   readme: 'Leaflet.FreeDraw\n================\n\n![Travis](http://img.shields.io/travis/Wildhoney/Leaflet.FreeDraw.svg?style=flat)\n&nbsp;\n![npm](http://img.shields.io/npm/v/leaflet.freedraw.svg?style=flat)\n&nbsp;\n![MIT License](http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat)\n\n* **Heroku**: [http://freedraw.herokuapp.com/](http://freedraw.herokuapp.com/)\n* **Bower:** `bower install leaflet.freedraw`;\n\nUse [Leaflet.draw](https://github.com/Leaflet/Leaflet.draw) for drawing pre-defined polygons and linear shapes &ndash; `Leaflet.FreeDraw`\'s selling point is that it allows you to freely draw a polygon like [Zoopla](http://www.zoopla.co.uk/for-sale/map/property/london/?include_retirement_homes=true&include_shared_ownership=true&new_homes=include&q=London&results_sort=newest_listings&search_source=home&pn=1&view_type=map). Hulls are also supported to normalise polygons when users draw an insane polygon &ndash; currently `Leaflet.FreeDraw` supports Brian Barnett\'s [Graham Scan module](https://github.com/brian3kb/graham_scan_js) and my adaptation of the [concave hull algorithm](https://github.com/Wildhoney/ConcaveHull).\n\n`L.FreeDraw` has been tested in IE9+\n\n![FreeDraw Screenshot](http://i.imgur.com/5ab3P4j.png)\n\n---\n\n## Getting Started\n\n`L.FreeDraw` follows the same convention as other modules, and therefore you should invoke the `addLayer` on your map instance &ndash; passing in an instance of `L.FreeDraw`.\n\n```javascript\n// Create Leaflet.js instance and then add FreeDraw on top.\nvar map = L.map(\'map\').setView([51.505, -0.09], 14);\nmap.addLayer(new L.FreeDraw());\n```\n\nUpon instantiation of `L.FreeDraw` you can immediately define the mode &ndash; with the default being `L.FreeDraw.MODES.VIEW` &ndash; please see [modes](#modes) for more information.\n\n```javascript\n// Allow the user to only create and edit polygons.\nmap.addLayer(new L.FreeDraw({\n    mode: L.FreeDraw.MODES.CREATE | L.FreeDraw.MODES.EDIT\n}));\n```\n\nWorth noting is that Leaflet.js often ships with `new`able equivalents &ndash; such as `L.map` for `new L.Map` &mdash; [read why here](http://37.media.tumblr.com/6a9fcffde2da977266b0ea99b15d5803/tumblr_n42cjjsriB1smcbm7o1_400.gif) &mdash; `L.FreeDraw` follows the same convention and provides a convenient `L.freeDraw` method for instantiating `L.FreeDraw` for you whilst passing through the options.\n\n![Washes Right Off](http://images1.fanpop.com/images/photos/2500000/Calvin-and-Hobbes-Comic-Strips-calvin-and-hobbes-2509598-600-191.gif)\n\nFurthermore by invoking the `cancelAction` method you can cancel the current action &ndash; such as drawing a polygon &ndash; this method is especially useful for allowing the user to cancel their action by pressing the escape key.\n\n## Fetching Markers\n\nOnce the user has created, deleted, or edited a polygon, you\'ll likely wish to load in markers based on the polygons visible &ndash; with `L.FreeDraw` the event `markers` is emitted with an array of `L.LatLng` objects in the first argument as `eventData.latLngs`:\n\n```javascript\nfreeDraw.on(\'markers\', function getMarkers(eventData) {\n    var latLngs = eventData.latLngs;\n    // ...\n    var latLng = L.latLng(51.505, -0.09);\n    freeDraw.setMarkers([latLng]);\n});\n```\n\nBy invoking the `freeDraw.setMarkers` method with an array of `latLngs` your markers will appear on the map. You may also use the second argument of the `setMarkers` resolution method to specify a custom `L.DivIcon`.\n\n## Options\n\nFreeDraw has quite a few options &ndash; all of which can be seen by taking a look at the `L.FreeDraw.Options` object. However, there are certain options that you are likely to use more than others.\n\n```javascript\n// Allow the user to define multiple polygons on one map.\nfreeDraw.options.allowMultiplePolygons(true);\n\n// Prevent the rendering of the polygon via a convex/concave hull.\nfreeDraw.options.setHullAlgorithm(false);\n\n// Use ClipperJS to simplify and clean the polygon.\nfreeDraw.options.setPolygonSimplification(true);\n\n// Utilise Brian Barnett\'s convex hull.\nfreeDraw.options.setHullAlgorithm(\'brian3kb/graham_scan_js\');\n\n// ...Or my adaptation of the concave hull.\nfreeDraw.options.setHullAlgorithm(\'Wildhoney/ConcaveHull\');\n```\n\nFor the hull algorithm implementations, take a look at the [following paper](http://ubicomp.algoritmi.uminho.pt/local/concavehull.html) on convex hulls and concave hulls.\n\nAll of the polygons drawn with `L.FreeDraw` can be modified using the options and [standard CSS](http://tutorials.jenkov.com/svg/svg-and-css.html).\n\nOnce the user has drawn their free-hand drawing, it is converted into a polygon by Leaflet.js &ndash; you can define how smooth the rendered polygon is by using the `setSmoothFactor` method &ndash; by default the `smoothFactor` is **5**.\n\n### Polygon Mutation\n\nWhen a user is modifying a polygon the `markers` event is emitted each and every time &ndash; which may be overkill, especially if your requests are somewhat time consuming. In this case `L.FreeDraw` allows you to defer the fetching of markers for when the edit mode has been exited with `freeDraw.options.setBoundariesAfterEdit(true)`.\n\n### Polygon Intersection\n\nBy invoking the `freeDraw.allowPolygonMerging(true)` method, `L.FreeDraw` will attempt to join up any polygons that intersect.\n\n### Exit Create Mode\n\nAfter drawing a polygon the `L.FreeDraw.MODES.CREATE` mode will automatically be exited &ndash; but this can be suppressed by specifying `freeDraw.options.exitModeAfterCreate(false)` in which case the create mode will be persisted until the user explicitly exits it.\n\n## Modes\n\nFreeDraw by default uses the `L.FreeDraw.MODES.VIEW` mode which prevents the user from creating, editing, or deleting any polygons. When instantiating `L.FreeDraw` you may override the default mode &ndash; in the following case a user may **only** delete polygons:\n\n```javascript\nvar freeDraw = window.freeDraw = new L.FreeDraw({\n    mode: L.FreeDraw.MODES.DELETE\n});\n```\n\nIn specifying the mode you are using [bitwise operators](http://en.wikipedia.org/wiki/Bitwise_operation) with the mapping being as follows:\n\n```javascript\nL.FreeDraw.MODES: {\n    VIEW:   1,\n    CREATE: 2,\n    EDIT:   4,\n    DELETE: 8,\n    ALL:    1 | 2 | 4 | 8\n}\n```\n\nTherefore you\'re able to combine the bitwise operators to specify multiple modes. For example, if you would like to allow the user to create and delete, then you would specify the options as `L.FreeDraw.MODES.CREATE | L.FreeDraw.MODES.DELETE`. By allowing a user to perform every action you would have to concatenate all of the modes via the pipe (`|`) character &ndash; therefore `L.FreeDraw` provides the convenient `L.FreeDraw.MODES.ALL` property which does that for you.\n\nUsing the `L.FreeDraw.MODES.ALL` property you could easily enable all the modes **except** edit with the following: `L.FreeDraw.MODES.ALL ^ L.FreeDraw.MODES.EDIT`.\n\nAll modes allow the user to zoom and drag **except** when you have the `L.FreeDraw.MODES.CREATE` enabled &ndash; even when used in conjunction with other modes.\n\nIt\'s quite likely that you\'ll want to change the mode as the user interacts with your application &ndash; for this you have the `setMode` method which accepts an aforementioned bitwise operator for determining what actions the user is able to perform.\n\n```javascript\n// Change the mode to allow the user to only edit and delete polygons.\nvar freeDraw = new L.FreeDraw();\nfreeDraw.setMode(L.FreeDraw.MODES.EDIT | L.FreeDraw.MODES.DELETE);\n```\n\n`L.FreeDraw` also ships with the `freeDraw.unsetMode` for unsetting a mode based on the current mode.\n\nYou may also listen to updates of the mode using the `freeDraw.on(\'mode\')` event.\n\n### Class Names\n\nDepending on the mode you can apply different CSS styles &ndash; for example when the user is not in edit mode you probably wish to hide the edges &ndash; by default all edges would be hidden, and only enabled when the `mode-edit` class has been applied to the `map` node:\n\n```css\nsection.map.mode-edit div.polygon-elbow {\n    opacity: 1;\n    pointer-events: all;\n}\n```\n\nEach mode maps to a different class which is conditionally applied to the `map` based on whether that mode is active:\n\n * `mode-view` maps to `L.FreeDraw.MODES.VIEW`;\n * `mode-create` maps to `L.FreeDraw.MODES.CREATE`;\n * `mode-edit` maps to `L.FreeDraw.MODES.EDIT`;\n * `mode-delete` maps to `L.FreeDraw.MODES.DELETE`;\n \nAnother example would be changing the `cursor` type when the user is in polygon creation mode:\n\n```css\nsection.map.mode-create {\n    cursor: crosshair;\n}\n```\n\nYou may change the class name of the polygon edges with the `setIconClassName` method, and the SVG class name with `setSVGClassName`.',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'e307869526d3017883daeefc6dbf36d900ef0f94',
29 silly publish   _id: 'leaflet.freedraw@0.4.4',
29 silly publish   _shasum: '889ab3f1da6be1b1cca27d3d6aee4c72e67727a8',
29 silly publish   _from: '.' }
30 verbose mapToRegistry name leaflet.freedraw
31 verbose mapToRegistry uri https://registry.npmjs.org/leaflet.freedraw
32 verbose publish registryBase https://registry.npmjs.org/
33 verbose request where is /leaflet.freedraw
34 verbose request registry https://registry.npmjs.org/
35 verbose request id ef45938df25ef4e7
36 verbose request url raw /leaflet.freedraw
37 verbose request url resolving [ 'https://registry.npmjs.org/', './leaflet.freedraw' ]
38 verbose request url resolved https://registry.npmjs.org/leaflet.freedraw
39 verbose request where is https://registry.npmjs.org/leaflet.freedraw
40 verbose request setting basic auth
41 info trying registry request attempt 1 at 10:29:04
42 http PUT https://registry.npmjs.org/leaflet.freedraw
43 http 403 https://registry.npmjs.org/leaflet.freedraw
44 verbose headers { date: 'Fri, 29 Aug 2014 09:29:07 GMT',
44 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
44 verbose headers   'content-type': 'application/json',
44 verbose headers   'cache-control': 'max-age=60',
44 verbose headers   'content-length': '12721',
44 verbose headers   'accept-ranges': 'bytes',
44 verbose headers   via: '1.1 varnish',
44 verbose headers   'x-served-by': 'cache-lo83-LHR',
44 verbose headers   'x-cache': 'MISS',
44 verbose headers   'x-cache-hits': '0',
44 verbose headers   'x-timer': 'S1409304545.624702,VS0,VE1775',
44 verbose headers   'keep-alive': 'timeout=10, max=50',
44 verbose headers   connection: 'Keep-Alive' }
45 error publish Failed PUT 403
46 error Error: forbidden cannot modify pre-existing version: 0.4.4
46 error old={"name":"leaflet.freedraw","version":"0.4.4","description":"Zoopla inspired freehand polygon creation using Leaflet.js.","main":"dist/leaflet.freedraw.min.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/Wildhoney/Leaflet.FreeDraw.git"},"keywords":["leaflet","freedraw","polygon","drawing","freehand"],"author":{"name":"Adam Timberlake","email":"adam.timberlake@gmail.com"},"license":"MIT","bugs":{"url":"https://github.com/Wildhoney/Leaflet.FreeDraw/issues"},"homepage":"https://github.com/Wildhoney/Leaflet.FreeDraw","dependencies":{"bower":"^1.3.9","express":"^4.8.5","grunt":"^0.4.5","grunt-cli":"^0.1.13","grunt-contrib-compress":"^0.10.0","grunt-contrib-concat":"^0.5.0","grunt-contrib-copy":"^0.5.0","grunt-contrib-jshint":"^0.10.0","grunt-contrib-uglify":"^0.5.1","grunt-karma":"^0.8.3","karma":"^0.12.22"},"gitHead":"386c71e691a5f1b8e3df1e89238d39a6365b2df4","_id":"leaflet.freedraw@0.4.4","_shasum":"8e5ec3def03ea353b97319df4406a525d73ded19","_from":".","_npmVersion":"2.0.0-alpha-5","_npmUser":{"name":"wildhoney","email":"adam.timberlake@gmail.com"},"maintainers":[{"name":"wildhoney","email":"adam.timberlake@gmail.com"}],"dist":{"shasum":"8e5ec3def03ea353b97319df4406a525d73ded19","tarball":"http://registry.npmjs.org/leaflet.freedraw/-/leaflet.freedraw-0.4.4.tgz"}}
46 error new={"name":"leaflet.freedraw","version":"0.4.4","description":"Zoopla inspired freehand polygon creation using Leaflet.js.","main":"dist/leaflet.freedraw.min.js","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/Wildhoney/Leaflet.FreeDraw.git"},"keywords":["leaflet","freedraw","polygon","drawing","freehand"],"author":{"name":"Adam Timberlake","email":"adam.timberlake@gmail.com"},"license":"MIT","bugs":{"url":"https://github.com/Wildhoney/Leaflet.FreeDraw/issues"},"homepage":"https://github.com/Wildhoney/Leaflet.FreeDraw","dependencies":{"bower":"^1.3.9","express":"^4.8.5","grunt":"^0.4.5","grunt-cli":"^0.1.13","grunt-contrib-compress":"^0.10.0","grunt-contrib-concat":"^0.5.0","grunt-contrib-copy":"^0.5.0","grunt-contrib-jshint":"^0.10.0","grunt-contrib-uglify":"^0.5.1","grunt-karma":"^0.8.3","karma":"^0.12.22"},"readme":"Leaflet.FreeDraw\u000a================\u000a\u000a![Travis](http://img.shields.io/travis/Wildhoney/Leaflet.FreeDraw.svg?style=flat)\u000a&nbsp;\u000a![npm](http://img.shields.io/npm/v/leaflet.freedraw.svg?style=flat)\u000a&nbsp;\u000a![MIT License](http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat)\u000a\u000a* **Heroku**: [http://freedraw.herokuapp.com/](http://freedraw.herokuapp.com/)\u000a* **Bower:** `bower install leaflet.freedraw`;\u000a\u000aUse [Leaflet.draw](https://github.com/Leaflet/Leaflet.draw) for drawing pre-defined polygons and linear shapes &ndash; `Leaflet.FreeDraw`'s selling point is that it allows you to freely draw a polygon like [Zoopla](http://www.zoopla.co.uk/for-sale/map/property/london/?include_retirement_homes=true&include_shared_ownership=true&new_homes=include&q=London&results_sort=newest_listings&search_source=home&pn=1&view_type=map). Hulls are also supported to normalise polygons when users draw an insane polygon &ndash; currently `Leaflet.FreeDraw` supports Brian Barnett's [Graham Scan module](https://github.com/brian3kb/graham_scan_js) and my adaptation of the [concave hull algorithm](https://github.com/Wildhoney/ConcaveHull).\u000a\u000a`L.FreeDraw` has been tested in IE9+\u000a\u000a![FreeDraw Screenshot](http://i.imgur.com/5ab3P4j.png)\u000a\u000a---\u000a\u000a## Getting Started\u000a\u000a`L.FreeDraw` follows the same convention as other modules, and therefore you should invoke the `addLayer` on your map instance &ndash; passing in an instance of `L.FreeDraw`.\u000a\u000a```javascript\u000a// Create Leaflet.js instance and then add FreeDraw on top.\u000avar map = L.map('map').setView([51.505, -0.09], 14);\u000amap.addLayer(new L.FreeDraw());\u000a```\u000a\u000aUpon instantiation of `L.FreeDraw` you can immediately define the mode &ndash; with the default being `L.FreeDraw.MODES.VIEW` &ndash; please see [modes](#modes) for more information.\u000a\u000a```javascript\u000a// Allow the user to only create and edit polygons.\u000amap.addLayer(new L.FreeDraw({\u000a    mode: L.FreeDraw.MODES.CREATE | L.FreeDraw.MODES.EDIT\u000a}));\u000a```\u000a\u000aWorth noting is that Leaflet.js often ships with `new`able equivalents &ndash; such as `L.map` for `new L.Map` &mdash; [read why here](http://37.media.tumblr.com/6a9fcffde2da977266b0ea99b15d5803/tumblr_n42cjjsriB1smcbm7o1_400.gif) &mdash; `L.FreeDraw` follows the same convention and provides a convenient `L.freeDraw` method for instantiating `L.FreeDraw` for you whilst passing through the options.\u000a\u000a![Washes Right Off](http://images1.fanpop.com/images/photos/2500000/Calvin-and-Hobbes-Comic-Strips-calvin-and-hobbes-2509598-600-191.gif)\u000a\u000aFurthermore by invoking the `cancelAction` method you can cancel the current action &ndash; such as drawing a polygon &ndash; this method is especially useful for allowing the user to cancel their action by pressing the escape key.\u000a\u000a## Fetching Markers\u000a\u000aOnce the user has created, deleted, or edited a polygon, you'll likely wish to load in markers based on the polygons visible &ndash; with `L.FreeDraw` the event `markers` is emitted with an array of `L.LatLng` objects in the first argument as `eventData.latLngs`:\u000a\u000a```javascript\u000afreeDraw.on('markers', function getMarkers(eventData) {\u000a    var latLngs = eventData.latLngs;\u000a    // ...\u000a    var latLng = L.latLng(51.505, -0.09);\u000a    freeDraw.setMarkers([latLng]);\u000a});\u000a```\u000a\u000aBy invoking the `freeDraw.setMarkers` method with an array of `latLngs` your markers will appear on the map. You may also use the second argument of the `setMarkers` resolution method to specify a custom `L.DivIcon`.\u000a\u000a## Options\u000a\u000aFreeDraw has quite a few options &ndash; all of which can be seen by taking a look at the `L.FreeDraw.Options` object. However, there are certain options that you are likely to use more than others.\u000a\u000a```javascript\u000a// Allow the user to define multiple polygons on one map.\u000afreeDraw.options.allowMultiplePolygons(true);\u000a\u000a// Prevent the rendering of the polygon via a convex/concave hull.\u000afreeDraw.options.setHullAlgorithm(false);\u000a\u000a// Use ClipperJS to simplify and clean the polygon.\u000afreeDraw.options.setPolygonSimplification(true);\u000a\u000a// Utilise Brian Barnett's convex hull.\u000afreeDraw.options.setHullAlgorithm('brian3kb/graham_scan_js');\u000a\u000a// ...Or my adaptation of the concave hull.\u000afreeDraw.options.setHullAlgorithm('Wildhoney/ConcaveHull');\u000a```\u000a\u000aFor the hull algorithm implementations, take a look at the [following paper](http://ubicomp.algoritmi.uminho.pt/local/concavehull.html) on convex hulls and concave hulls.\u000a\u000aAll of the polygons drawn with `L.FreeDraw` can be modified using the options and [standard CSS](http://tutorials.jenkov.com/svg/svg-and-css.html).\u000a\u000aOnce the user has drawn their free-hand drawing, it is converted into a polygon by Leaflet.js &ndash; you can define how smooth the rendered polygon is by using the `setSmoothFactor` method &ndash; by default the `smoothFactor` is **5**.\u000a\u000a### Polygon Mutation\u000a\u000aWhen a user is modifying a polygon the `markers` event is emitted each and every time &ndash; which may be overkill, especially if your requests are somewhat time consuming. In this case `L.FreeDraw` allows you to defer the fetching of markers for when the edit mode has been exited with `freeDraw.options.setBoundariesAfterEdit(true)`.\u000a\u000a### Polygon Intersection\u000a\u000aBy invoking the `freeDraw.allowPolygonMerging(true)` method, `L.FreeDraw` will attempt to join up any polygons that intersect.\u000a\u000a### Exit Create Mode\u000a\u000aAfter drawing a polygon the `L.FreeDraw.MODES.CREATE` mode will automatically be exited &ndash; but this can be suppressed by specifying `freeDraw.options.exitModeAfterCreate(false)` in which case the create mode will be persisted until the user explicitly exits it.\u000a\u000a## Modes\u000a\u000aFreeDraw by default uses the `L.FreeDraw.MODES.VIEW` mode which prevents the user from creating, editing, or deleting any polygons. When instantiating `L.FreeDraw` you may override the default mode &ndash; in the following case a user may **only** delete polygons:\u000a\u000a```javascript\u000avar freeDraw = window.freeDraw = new L.FreeDraw({\u000a    mode: L.FreeDraw.MODES.DELETE\u000a});\u000a```\u000a\u000aIn specifying the mode you are using [bitwise operators](http://en.wikipedia.org/wiki/Bitwise_operation) with the mapping being as follows:\u000a\u000a```javascript\u000aL.FreeDraw.MODES: {\u000a    VIEW:   1,\u000a    CREATE: 2,\u000a    EDIT:   4,\u000a    DELETE: 8,\u000a    ALL:    1 | 2 | 4 | 8\u000a}\u000a```\u000a\u000aTherefore you're able to combine the bitwise operators to specify multiple modes. For example, if you would like to allow the user to create and delete, then you would specify the options as `L.FreeDraw.MODES.CREATE | L.FreeDraw.MODES.DELETE`. By allowing a user to perform every action you would have to concatenate all of the modes via the pipe (`|`) character &ndash; therefore `L.FreeDraw` provides the convenient `L.FreeDraw.MODES.ALL` property which does that for you.\u000a\u000aUsing the `L.FreeDraw.MODES.ALL` property you could easily enable all the modes **except** edit with the following: `L.FreeDraw.MODES.ALL ^ L.FreeDraw.MODES.EDIT`.\u000a\u000aAll modes allow the user to zoom and drag **except** when you have the `L.FreeDraw.MODES.CREATE` enabled &ndash; even when used in conjunction with other modes.\u000a\u000aIt's quite likely that you'll want to change the mode as the user interacts with your application &ndash; for this you have the `setMode` method which accepts an aforementioned bitwise operator for determining what actions the user is able to perform.\u000a\u000a```javascript\u000a// Change the mode to allow the user to only edit and delete polygons.\u000avar freeDraw = new L.FreeDraw();\u000afreeDraw.setMode(L.FreeDraw.MODES.EDIT | L.FreeDraw.MODES.DELETE);\u000a```\u000a\u000a`L.FreeDraw` also ships with the `freeDraw.unsetMode` for unsetting a mode based on the current mode.\u000a\u000aYou may also listen to updates of the mode using the `freeDraw.on('mode')` event.\u000a\u000a### Class Names\u000a\u000aDepending on the mode you can apply different CSS styles &ndash; for example when the user is not in edit mode you probably wish to hide the edges &ndash; by default all edges would be hidden, and only enabled when the `mode-edit` class has been applied to the `map` node:\u000a\u000a```css\u000asection.map.mode-edit div.polygon-elbow {\u000a    opacity: 1;\u000a    pointer-events: all;\u000a}\u000a```\u000a\u000aEach mode maps to a different class which is conditionally applied to the `map` based on whether that mode is active:\u000a\u000a * `mode-view` maps to `L.FreeDraw.MODES.VIEW`;\u000a * `mode-create` maps to `L.FreeDraw.MODES.CREATE`;\u000a * `mode-edit` maps to `L.FreeDraw.MODES.EDIT`;\u000a * `mode-delete` maps to `L.FreeDraw.MODES.DELETE`;\u000a \u000aAnother example would be changing the `cursor` type when the user is in polygon creation mode:\u000a\u000a```css\u000asection.map.mode-create {\u000a    cursor: crosshair;\u000a}\u000a```\u000a\u000aYou may change the class name of the polygon edges with the `setIconClassName` method, and the SVG class name with `setSVGClassName`.","readmeFilename":"README.md","gitHead":"e307869526d3017883daeefc6dbf36d900ef0f94","_id":"leaflet.freedraw@0.4.4","_shasum":"889ab3f1da6be1b1cca27d3d6aee4c72e67727a8","_from":".","_npmVersion":"2.0.0-alpha-5","_npmUser":{"name":"wildhoney","email":"adam.timberlake@gmail.com"},"maintainers":[{"name":"wildhoney","email":"adam.timberlake@gmail.com"}],"dist":{"shasum":"889ab3f1da6be1b1cca27d3d6aee4c72e67727a8","tarball":"http://registry.npmjs.org/leaflet.freedraw/-/leaflet.freedraw-0.4.4.tgz"}}: leaflet.freedraw
46 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:313:14)
46 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:251:65)
46 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
46 error     at Request.emit (events.js:98:17)
46 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
46 error     at Request.emit (events.js:117:20)
46 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
46 error     at IncomingMessage.emit (events.js:117:20)
46 error     at _stream_readable.js:929:16
46 error     at process._tickCallback (node.js:419:13)
47 error If you need help, you may report this *entire* log,
47 error including the npm and node versions, at:
47 error     <http://github.com/npm/npm/issues>
48 error System Darwin 13.2.0
49 error command "node" "/usr/local/bin/npm" "publish"
50 error cwd /Users/atimberlake/Webroot/Leaflet.FreeDraw
51 error node -v v0.10.29
52 error npm -v 2.0.0-alpha-5
53 verbose exit [ 1, true ]
